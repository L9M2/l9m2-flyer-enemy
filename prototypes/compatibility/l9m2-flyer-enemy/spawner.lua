---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by heyqule.
--- DateTime: 03/16/2020 1:56 PM
---
local setting_utils = require("setting-utils")

local ErmConfig = require('__enemyracemanager__/lib/global_config')
local ERM_UnitHelper = require('__enemyracemanager__/lib/rig/unit_helper')
local ERM_DebugHelper = require('__enemyracemanager__/lib/debug_helper')

local Table = require('__stdlib__/stdlib/utils/table')
local String = require('__stdlib__/stdlib/utils/string')
require('util')
local enemy_autoplace = require("__enemyracemanager__/lib/enemy-autoplace-utils")
require('__stdlib__/stdlib/utils/defines/time')
require('__enemyracemanager__/global')

local max_hitpoint_multiplier = settings.startup["enemyracemanager-max-hitpoint-multipliers"].value


-- Handles acid and poison resistance
local base_acid_resistance = 25
local incremental_acid_resistance = 55
-- Handles physical resistance
local base_physical_resistance = 0
local incremental_physical_resistance = 80
-- Handles fire and explosive resistance
local base_fire_resistance = 10
local incremental_fire_resistance = 70
-- Handles laser and electric resistance
local base_electric_resistance = 0
local incremental_electric_resistance = 80
-- Handles cold resistance
local base_cold_resistance = 25
local incremental_cold_resistance = 55

--local setting_utils = require("__ArmouredBiters__/setting-utils")
local s_r = setting_utils.getPositivePercentageOf("l9m2-flyer-small-flyer-spawn-probability")
local m_r = setting_utils.getPositivePercentageOf("l9m2-flyer-medium-flyer-spawn-probability")
local b_r = setting_utils.getPositivePercentageOf("l9m2-flyer-big-flyer-spawn-probability")
local bb_r = setting_utils.getPositivePercentageOf("l9m2-flyer-behemoth-flyer-spawn-probability")
local l_r = setting_utils.getPositivePercentageOf("l9m2-flyer-ultra-flyer-spawn-probability")
--[[
function makeLevelSpawners(level, type)
    data.raw['unit-spawner'][type]['autoplace'] = nil
    local spawner = util.table.deepcopy(data.raw['unit-spawner'][type])

    local original_hitpoint = spawner['max_health']

    spawner['localised_name'] = { 'entity-name.' .. MOD_NAME .. '/' .. spawner['name'], level }
    spawner['name'] = MOD_NAME .. '/' .. spawner['name'] .. '/' .. level;
    spawner['max_health'] = ERM_UnitHelper.get_building_health(original_hitpoint, original_hitpoint * max_hitpoint_multiplier, level)
    spawner['resistances'] = {
        { type = "acid", percent = ERM_UnitHelper.get_resistance(base_acid_resistance, incremental_acid_resistance, level) },
        { type = "poison", percent = ERM_UnitHelper.get_resistance(base_acid_resistance, incremental_acid_resistance, level) },
        { type = "physical", percent = ERM_UnitHelper.get_resistance(base_physical_resistance, incremental_physical_resistance, level) },
        --{ type = "fire", percent = ERM_UnitHelper.get_resistance(base_fire_resistance, incremental_fire_resistance, level) },
        { type = "explosion", percent = ERM_UnitHelper.get_resistance(base_fire_resistance, incremental_fire_resistance, level) },
        { type = "laser", percent = ERM_UnitHelper.get_resistance(base_electric_resistance, incremental_electric_resistance, level) },
        { type = "electric", percent = ERM_UnitHelper.get_resistance(base_electric_resistance, incremental_electric_resistance, level) },
        { type = "cold", percent = ERM_UnitHelper.get_resistance(base_cold_resistance, incremental_cold_resistance, level) }
    }
    spawner['healing_per_tick'] = ERM_UnitHelper.get_building_healing(original_hitpoint, max_hitpoint_multiplier, level)
    spawner['spawning_cooldown'] = { 600, 300 }

    local result_units = {
        { MOD_NAME .. '/small-flyer/' .. level, { { 0.0, 0.0 },{ 0.02, 0.0 },{ 0.1, 0.3 * s_r }, { 0.4, 0.0 } } },
        { MOD_NAME .. '/medium-flyer/' .. level, { { 0.2, 0.0 }, { 0.4, 0.3 * m_r }, { 0.7, 0.1 * m_r } } },
        { MOD_NAME .. '/big-flyer/' .. level, { { 0.5, 0.0 }, { 1.0, 0.4 * b_r } } },
        { MOD_NAME .. '/behemoth-flyer/' .. level, { { 0.9, 0.0 }, { 1.0, 0.3 * bb_r } } },
        { MOD_NAME .. '/ultra-flyer/' .. level, { { 0.97, 0.0 }, { 1.0, 0.01 * l_r } } }
    }

    spawner['result_units'] = result_units
    spawner['autoplace'] = enemy_autoplace.enemy_spawner_autoplace(0, FORCE_NAME)
    spawner['map_color'] = ERM_UnitHelper.format_map_color(settings.startup['enemyracemanager-flyer_map_color'].value)

    return spawner
end
]]
local max_level = ErmConfig.MAX_LEVELS

for i = 1, max_level do

    local biterSpawner = data.raw["unit-spawner"][MOD_NAME .. '/spitter-spawner/' .. i]
    if biterSpawner then
        local unitSet = biterSpawner["result_units"]
        unitSet[#unitSet + 1] = { MOD_NAME .. "/small-flyer/" .. i, { { 0.0, 0.0 },{ 0.02, 0.0 },{ 0.1, 0.3 * s_r }, { 0.4, 0.0 } } }
        unitSet[#unitSet + 1] = { MOD_NAME .. "/medium-flyer/" .. i, { { 0.2, 0.0 }, { 0.4, 0.3 * m_r }, { 0.7, 0.1 * m_r } } }
        unitSet[#unitSet + 1] = { MOD_NAME .. "/big-flyer/" .. i, { { 0.5, 0.0 }, { 1.0, 0.4 * b_r } } }
        unitSet[#unitSet + 1] = { MOD_NAME .. "/behemoth-flyer/" .. i, { { 0.9, 0.0 }, { 1.0, 0.3 * bb_r } } }
        unitSet[#unitSet + 1] = { MOD_NAME .. '/ultra-flyer/' .. i, { { 0.97, 0.0 }, { 1.0, 0.01 * l_r } } }
    end
end

if settings.startup['enemyracemanager-enable-bitters'].value  then
    -- This set of data is used for set up default autoplace calculation.
    data.erm_spawn_specs = data.erm_spawn_specs or {}
    table.insert(data.erm_spawn_specs, {
        mod_name = MOD_NAME,
        force_name = FORCE_NAME,
        moisture = 1, -- 1 = Dry and 2 = Wet
        aux = 1, -- 1 = red desert, 2 = sand
        elevation = 3, --1,2,3 (1 low elevation, 2. medium, 3 high elavation)
        temperature = 2, --1,2,3 (1 cold, 2. normal, 3 hot)
        entity_filter = 'spitter',
        enforce_temperature = true,
    })
end